# Deployment System Configuration Guide

**Subtask 5.10**: Document System and Provide User Guides

## Overview

This guide provides detailed configuration instructions for the CrackSeg Deployment System. It
covers all configuration options, environment settings, and system parameters.

## Table of Contents

1. [System Configuration](#system-configuration)
2. [Environment Configuration](#environment-configuration)
3. [Health Monitoring Configuration](#health-monitoring-configuration)
4. [Performance Thresholds](#performance-thresholds)
5. [Resource Limits](#resource-limits)
6. [Security Configuration](#security-configuration)
7. [Alert Configuration](#alert-configuration)
8. [Advanced Configuration](#advanced-configuration)

## System Configuration

### Basic Configuration

```python
from crackseg.utils.deployment.config import DeploymentConfig

# Basic deployment configuration
config = DeploymentConfig(
    artifact_id="crackseg-model-v1",
    target_environment="production",
    enable_health_checks=True,
    enable_metrics_collection=True
)
```

### Configuration Parameters

| Parameter | Type | Default | Description |
|-----------|------|---------|-------------|
| `artifact_id` | str | Required | Identifier for the artifact to deploy |
| `target_environment` | str | Required | Target deployment environment |
| `enable_health_checks` | bool | True | Enable health monitoring |
| `enable_metrics_collection` | bool | True | Enable metrics collection |

## Environment Configuration

### Environment Types

```python
from crackseg.utils.deployment.multi_target import TargetEnvironment

# Available environments
environments = [
    TargetEnvironment.DEVELOPMENT,  # Development environment
    TargetEnvironment.STAGING,      # Staging environment
    TargetEnvironment.PRODUCTION,    # Production environment
    TargetEnvironment.TESTING,       # Testing environment
    TargetEnvironment.DEMO          # Demo environment
]
```

### Environment-Specific Configuration

```python
from crackseg.utils.deployment.multi_target import EnvironmentConfig
from crackseg.utils.deployment.orchestration import DeploymentStrategy

# Development environment
dev_config = EnvironmentConfig(
    name=TargetEnvironment.DEVELOPMENT,
    deployment_strategy=DeploymentStrategy.RECREATE,
    health_check_timeout=30,
    max_retries=1,
    auto_rollback=False,
    performance_thresholds={
        "response_time_ms": 1000.0,
        "memory_usage_mb": 1024.0
    },
    resource_limits={
        "memory_mb": 2048,
        "cpu_cores": 2
    }
)

# Staging environment
staging_config = EnvironmentConfig(
    name=TargetEnvironment.STAGING,
    deployment_strategy=DeploymentStrategy.BLUE_GREEN,
    health_check_timeout=45,
    max_retries=2,
    auto_rollback=True,
    performance_thresholds={
        "response_time_ms": 750.0,
        "memory_usage_mb": 1536.0
    },
    resource_limits={
        "memory_mb": 3072,
        "cpu_cores": 3
    }
)

# Production environment
prod_config = EnvironmentConfig(
    name=TargetEnvironment.PRODUCTION,
    deployment_strategy=DeploymentStrategy.CANARY,
    health_check_timeout=60,
    max_retries=3,
    auto_rollback=True,
    performance_thresholds={
        "response_time_ms": 500.0,
        "memory_usage_mb": 2048.0
    },
    resource_limits={
        "memory_mb": 4096,
        "cpu_cores": 4
    },
    security_requirements={
        "ssl_required": True,
        "authentication_required": True,
        "encryption_required": True
    }
)
```

### Deployment Strategies

```python
from crackseg.utils.deployment.orchestration import DeploymentStrategy

# Available deployment strategies
strategies = {
    "RECREATE": DeploymentStrategy.RECREATE,      # Stop old, start new
    "BLUE_GREEN": DeploymentStrategy.BLUE_GREEN,  # Blue-green deployment
    "CANARY": DeploymentStrategy.CANARY,          # Canary deployment
    "ROLLING": DeploymentStrategy.ROLLING,        # Rolling update
    "ROLLBACK": DeploymentStrategy.ROLLBACK       # Rollback deployment
}
```

## Health Monitoring Configuration

### Basic Health Monitoring

```python
from crackseg.utils.deployment.health_monitoring import (
    DefaultHealthChecker,
    DefaultResourceMonitor,
    DeploymentHealthMonitor
)

# Configure health monitoring
monitor = DeploymentHealthMonitor(
    health_checker=DefaultHealthChecker(),
    resource_monitor=DefaultResourceMonitor(),
    check_interval=30,      # Check every 30 seconds
    alert_threshold=0.8,    # Alert at 80% resource usage
    timeout=60,             # 60 second timeout
    max_retries=3           # 3 retries before marking as failed
)
```

### Custom Health Checkers

```python
from crackseg.utils.deployment.health_monitoring import HealthChecker

class CustomHealthChecker(HealthChecker):
    def check_health(self, deployment_id: str) -> dict[str, Any]:
        # Implement custom health check logic
        return {
            "status": "healthy",
            "response_time_ms": 150,
            "error_rate": 0.01,
            "custom_metric": 0.95
        }

# Use custom health checker
monitor = DeploymentHealthMonitor(
    health_checker=CustomHealthChecker(),
    resource_monitor=DefaultResourceMonitor()
)
```

### Resource Monitoring Configuration

```python
from crackseg.utils.deployment.health_monitoring import DefaultResourceMonitor

# Configure resource monitoring
resource_monitor = DefaultResourceMonitor(
    memory_threshold=0.8,    # Alert at 80% memory usage
    cpu_threshold=0.7,       # Alert at 70% CPU usage
    disk_threshold=0.9,      # Alert at 90% disk usage
    network_threshold=0.6    # Alert at 60% network usage
)
```

## Performance Thresholds

### Response Time Thresholds

```python
# Performance thresholds configuration
performance_thresholds = {
    "response_time_ms": 500.0,      # Maximum response time
    "throughput_rps": 1000.0,       # Minimum requests per second
    "error_rate": 0.01,             # Maximum error rate (1%)
    "availability": 0.999,           # Minimum availability (99.9%)
    "latency_p95_ms": 200.0,        # 95th percentile latency
    "latency_p99_ms": 500.0         # 99th percentile latency
}
```

### Memory Usage Thresholds

```python
# Memory usage thresholds
memory_thresholds = {
    "memory_usage_mb": 2048.0,      # Maximum memory usage
    "memory_usage_percent": 0.8,    # Maximum memory usage percentage
    "heap_usage_mb": 1536.0,        # Maximum heap usage
    "gc_time_percent": 0.1          # Maximum garbage collection time
}
```

### CPU Usage Thresholds

```python
# CPU usage thresholds
cpu_thresholds = {
    "cpu_usage_percent": 0.7,       # Maximum CPU usage percentage
    "cpu_load_average": 2.0,        # Maximum load average
    "cpu_idle_percent": 0.3         # Minimum idle CPU percentage
}
```

## Resource Limits

### Memory Limits

```python
# Memory resource limits
memory_limits = {
    "memory_mb": 4096,              # Maximum memory allocation
    "heap_mb": 3072,                # Maximum heap size
    "stack_mb": 512,                # Maximum stack size
    "off_heap_mb": 1024             # Maximum off-heap memory
}
```

### CPU Limits

```python
# CPU resource limits
cpu_limits = {
    "cpu_cores": 4,                 # Number of CPU cores
    "cpu_quota": 400,               # CPU quota (millicores)
    "cpu_period": 100000,           # CPU period (microseconds)
    "cpu_shares": 1024              # CPU shares (relative priority)
}
```

### Storage Limits

```python
# Storage resource limits
storage_limits = {
    "disk_gb": 100,                 # Maximum disk space
    "inodes": 1000000,              # Maximum inodes
    "tmpfs_mb": 512                 # Temporary filesystem size
}
```

### Network Limits

```python
# Network resource limits
network_limits = {
    "bandwidth_mbps": 1000,         # Maximum bandwidth
    "connections": 10000,            # Maximum connections
    "ports": 65535                  # Maximum port range
}
```

## Security Configuration

### Authentication Configuration

```python
# Authentication settings
auth_config = {
    "authentication_required": True,
    "auth_type": "jwt",             # JWT, OAuth, API Key
    "token_expiry_hours": 24,
    "refresh_token_enabled": True,
    "session_timeout_minutes": 30
}
```

### Authorization Configuration

```python
# Authorization settings
authz_config = {
    "role_based_access": True,
    "required_roles": ["deployer", "admin"],
    "permission_level": "write",
    "resource_scope": ["artifacts", "deployments"]
}
```

### Encryption Configuration

```python
# Encryption settings
encryption_config = {
    "encryption_required": True,
    "encryption_algorithm": "AES-256",
    "key_rotation_days": 90,
    "tls_version": "1.3",
    "cipher_suites": ["TLS_AES_256_GCM_SHA384"]
}
```

### SSL/TLS Configuration

```python
# SSL/TLS settings
ssl_config = {
    "ssl_required": True,
    "certificate_path": "/path/to/cert.pem",
    "private_key_path": "/path/to/key.pem",
    "ca_certificate_path": "/path/to/ca.pem",
    "verify_peer": True,
    "verify_hostname": True
}
```

## Alert Configuration

### Alert Handlers

```python
from crackseg.utils.deployment.orchestration import (
    LoggingAlertHandler,
    EmailAlertHandler,
    SlackAlertHandler
)

# Configure alert handlers
alert_handlers = [
    LoggingAlertHandler(level="WARNING"),
    EmailAlertHandler(
        smtp_server="smtp.company.com",
        smtp_port=587,
        username="alerts@company.com",
        password="secure_password",
        recipients=["admin@company.com", "ops@company.com"]
    ),
    SlackAlertHandler(
        webhook_url="https://hooks.slack.com/services/...",
        channel="#deployments",
        username="DeploymentBot"
    )
]
```

### Alert Thresholds

```python
# Alert threshold configuration
alert_thresholds = {
    "critical": {
        "cpu_usage": 0.9,           # 90% CPU usage
        "memory_usage": 0.95,        # 95% memory usage
        "disk_usage": 0.95,          # 95% disk usage
        "error_rate": 0.05,          # 5% error rate
        "response_time_ms": 2000     # 2 second response time
    },
    "warning": {
        "cpu_usage": 0.7,            # 70% CPU usage
        "memory_usage": 0.8,         # 80% memory usage
        "disk_usage": 0.8,           # 80% disk usage
        "error_rate": 0.01,          # 1% error rate
        "response_time_ms": 1000     # 1 second response time
    },
    "info": {
        "cpu_usage": 0.5,            # 50% CPU usage
        "memory_usage": 0.6,         # 60% memory usage
        "disk_usage": 0.6,           # 60% disk usage
        "error_rate": 0.001,         # 0.1% error rate
        "response_time_ms": 500      # 500ms response time
    }
}
```

### Alert Rules

```python
# Alert rules configuration
alert_rules = {
    "deployment_failure": {
        "condition": "deployment_status == 'failed'",
        "severity": "critical",
        "handlers": ["email", "slack"],
        "cooldown_minutes": 30
    },
    "health_check_failure": {
        "condition": "health_status == 'unhealthy'",
        "severity": "warning",
        "handlers": ["email"],
        "cooldown_minutes": 15
    },
    "resource_exhaustion": {
        "condition": "cpu_usage > 0.9 or memory_usage > 0.95",
        "severity": "critical",
        "handlers": ["email", "slack"],
        "cooldown_minutes": 5
    }
}
```

## Advanced Configuration

### Multi-Environment Configuration

```python
from crackseg.utils.deployment.multi_target import MultiTargetDeploymentManager

# Configure multi-target deployment manager
manager = MultiTargetDeploymentManager()

# Set environment-specific configurations
manager.set_environment_config(
    TargetEnvironment.DEVELOPMENT,
    EnvironmentConfig(
        name=TargetEnvironment.DEVELOPMENT,
        deployment_strategy=DeploymentStrategy.RECREATE,
        health_check_timeout=30,
        max_retries=1,
        auto_rollback=False
    )
)

manager.set_environment_config(
    TargetEnvironment.PRODUCTION,
    EnvironmentConfig(
        name=TargetEnvironment.PRODUCTION,
        deployment_strategy=DeploymentStrategy.CANARY,
        health_check_timeout=60,
        max_retries=3,
        auto_rollback=True,
        performance_thresholds={
            "response_time_ms": 500.0,
            "memory_usage_mb": 2048.0
        }
    )
)
```

### Custom Deployment Strategies

```python
from crackseg.utils.deployment.orchestration import DeploymentStrategy

class CustomCanaryStrategy(DeploymentStrategy):
    def deploy(self, config: DeploymentConfig) -> DeploymentResult:
        # Implement custom canary deployment logic
        # 1. Deploy to 10% of traffic
        # 2. Monitor for 5 minutes
        # 3. If healthy, deploy to 50% of traffic
        # 4. Monitor for 10 minutes
        # 5. If healthy, deploy to 100% of traffic
        pass

# Use custom strategy
config.deployment_strategy = CustomCanaryStrategy()
```

### Performance Optimization

```python
# Performance optimization settings
optimization_config = {
    "model_quantization": True,
    "quantization_type": "int8",     # int8, fp16, dynamic
    "pruning_enabled": True,
    "pruning_ratio": 0.3,            # 30% pruning
    "compression_enabled": True,
    "compression_algorithm": "gzip",
    "cache_enabled": True,
    "cache_size_mb": 512,
    "thread_pool_size": 8,
    "connection_pool_size": 20
}
```

### Monitoring Configuration

```python
# Monitoring configuration
monitoring_config = {
    "metrics_collection": True,
    "metrics_interval_seconds": 30,
    "log_level": "INFO",
    "log_format": "json",
    "log_retention_days": 30,
    "tracing_enabled": True,
    "tracing_sampler": 0.1,          # 10% sampling
    "profiling_enabled": False,
    "profiling_interval_seconds": 300
}
```

## Configuration Validation

### Configuration Schema

```python
from dataclasses import dataclass
from typing import Any

@dataclass
class DeploymentSystemConfig:
    """Complete deployment system configuration."""

    # Basic configuration
    artifact_id: str
    target_environment: str
    enable_health_checks: bool = True
    enable_metrics_collection: bool = True

    # Environment configuration
    environment_configs: dict[str, EnvironmentConfig] | None = None

    # Health monitoring configuration
    health_check_interval: int = 30
    health_check_timeout: int = 60
    health_check_retries: int = 3

    # Performance thresholds
    performance_thresholds: dict[str, float] | None = None

    # Resource limits
    resource_limits: dict[str, Any] | None = None

    # Security configuration
    security_requirements: dict[str, Any] | None = None

    # Alert configuration
    alert_handlers: list[Any] | None = None
    alert_thresholds: dict[str, dict[str, float]] | None = None

    def validate(self) -> bool:
        """Validate configuration."""
        # Implement validation logic
        return True
```

### Configuration Examples

```python
# Complete configuration example
config = DeploymentSystemConfig(
    artifact_id="crackseg-model-v1",
    target_environment="production",
    enable_health_checks=True,
    enable_metrics_collection=True,
    health_check_interval=30,
    health_check_timeout=60,
    health_check_retries=3,
    performance_thresholds={
        "response_time_ms": 500.0,
        "memory_usage_mb": 2048.0,
        "cpu_usage_percent": 0.7
    },
    resource_limits={
        "memory_mb": 4096,
        "cpu_cores": 4,
        "disk_gb": 100
    },
    security_requirements={
        "ssl_required": True,
        "authentication_required": True,
        "encryption_required": True
    },
    alert_thresholds={
        "critical": {"cpu_usage": 0.9, "memory_usage": 0.95},
        "warning": {"cpu_usage": 0.7, "memory_usage": 0.8}
    }
)

# Validate configuration
if config.validate():
    print("Configuration is valid")
else:
    print("Configuration validation failed")
```

---

**Status**: ✅ **COMPLETED**

This configuration guide provides comprehensive documentation for all deployment system
configuration options, enabling users to properly configure the system for their specific requirements.
