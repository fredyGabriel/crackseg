# Prediction Analysis Guide

This guide explains how to use the CrackSeg prediction analysis system to evaluate model
performance and generate professional visualizations.

## Overview

The prediction analysis system consists of two main components:

1. **SimplePredictionAnalyzer**: Core analysis class with automatic mask inference
2. **CLI Tools**: Command-line interfaces for easy usage

## Key Features

- **Automatic Mask Inference**: Automatically find ground truth masks based on image filenames
- **Professional Visualizations**: Multi-panel visualizations with metrics
- **Flexible Analysis**: Support for single images, batch processing, and prediction-only mode
- **Comprehensive Metrics**: IoU, F1-Score, Precision, Recall, Accuracy

## Quick Start

### 1. Single Image Analysis with Automatic Mask Inference

The simplest way to analyze an image is to let the system automatically find the corresponding mask:

```bash
# Analyze with automatic mask inference
python scripts/analyze_predictions.py \
    --image data/train/images/98.jpg \
    --mask-dir data/train/masks
```

The system will:

- Load the image `data/train/images/98.jpg`
- Automatically find the mask `data/train/masks/98.png` (same name, different extension)
- Perform segmentation and calculate metrics
- Generate a visualization

### 2. Manual Mask Specification

If you prefer to specify the mask path explicitly:

```bash
# Analyze with manual mask specification
python scripts/analyze_predictions.py \
    --image data/train/images/98.jpg \
    --mask data/train/masks/98.png
```

### 3. Prediction Only (No Ground Truth)

For images without corresponding masks:

```bash
# Prediction only - no ground truth comparison
python scripts/analyze_predictions.py \
    --image data/train/images/98.jpg \
    --no-auto-mask
```

### 4. Batch Analysis

Process multiple images at once:

```bash
# Batch analysis with automatic mask inference
python scripts/analyze_predictions.py \
    --batch \
    --batch-dir data/train/images \
    --mask-dir data/train/masks \
    --batch-output-dir results
```

## Automatic Mask Inference

### How It Works

The automatic mask inference feature eliminates the need to manually specify mask paths. Here's how
it works:

1. **Filename Matching**: The system extracts the base filename from the image (without extension)
2. **Extension Flexibility**: It searches for masks with common extensions
  (.png, .jpg, .jpeg, .tiff, .tif)
3. **Directory Search**: Looks in the specified mask directory for matching files
4. **Graceful Fallback**: If no mask is found, performs prediction-only analysis

### Example

Given:

- Image: `data/train/images/98.jpg`
- Mask directory: `data/train/masks`

The system will automatically find: `data/train/masks/98.png`

### Supported Extensions

The system tries these extensions in order:

1. `.png` (most common for masks)
2. `.jpg`
3. `.jpeg`
4. `.tiff`
5. `.tif`

## Command Line Interface

### Basic Usage

```bash
python scripts/analyze_predictions.py [OPTIONS]
```

### Arguments

#### Required

- `--checkpoint`: Path to model checkpoint (default: `outputs/checkpoints/model_best.pth.tar`)
- `--image` or `--batch`: Either single image path or batch mode

#### Optional

- `--config`: Path to model configuration (default: `outputs/configurations/default_experiment/config.yaml`)
- `--mask`: Explicit mask path (overrides auto-inference)
- `--mask-dir`: Directory containing masks (for auto-inference)
- `--no-auto-mask`: Disable automatic mask inference
- `--threshold`: Segmentation threshold (default: 0.5)
- `--device`: Device to use (cuda/cpu, default: auto)
- `--output`: Output path for visualization
- `--no-viz`: Skip visualization generation
- `--verbose`: Enable verbose logging

#### Batch Processing

- `--batch`: Enable batch processing mode
- `--batch-dir`: Directory containing images for batch processing
- `--batch-output-dir`: Output directory for batch results

### Examples

#### Single Image Analysis

```bash
# Basic analysis with auto-inference
python scripts/analyze_predictions.py \
    --image data/train/images/98.jpg \
    --mask-dir data/train/masks

# Custom threshold
python scripts/analyze_predictions.py \
    --image data/train/images/98.jpg \
    --mask-dir data/train/masks \
    --threshold 0.7

# Custom output path
python scripts/analyze_predictions.py \
    --image data/train/images/98.jpg \
    --mask-dir data/train/masks \
    --output my_analysis.png
```

#### Batch Processing

```bash
# Process all images in directory
python scripts/analyze_predictions.py \
    --batch \
    --batch-dir data/train/images \
    --mask-dir data/train/masks

# Custom output directory
python scripts/analyze_predictions.py \
    --batch \
    --batch-dir data/train/images \
    --mask-dir data/train/masks \
    --batch-output-dir my_results
```

#### Advanced Usage

```bash
# Use specific checkpoint and config
python scripts/analyze_predictions.py \
    --checkpoint outputs/checkpoints/model_best.pth.tar \
    --config outputs/configurations/default_experiment/config.yaml \
    --image data/train/images/98.jpg \
    --mask-dir data/train/masks

# Force CPU usage
python scripts/analyze_predictions.py \
    --image data/train/images/98.jpg \
    --mask-dir data/train/masks \
    --device cpu

# Verbose logging
python scripts/analyze_predictions.py \
    --image data/train/images/98.jpg \
    --mask-dir data/train/masks \
    --verbose
```

## Python API

### SimplePredictionAnalyzer Class

```python
from crackseg.evaluation.simple_prediction_analyzer import SimplePredictionAnalyzer

# Initialize with automatic mask inference
analyzer = SimplePredictionAnalyzer(
    checkpoint_path="outputs/checkpoints/model_best.pth.tar",
    config_path="outputs/configurations/default_experiment/config.yaml",
    mask_dir="data/train/masks",  # Enable auto-inference
)

# Analyze image (automatically finds mask)
result = analyzer.analyze_image(
    image_path="data/train/images/98.jpg",
    threshold=0.5,
    auto_find_mask=True,
)

# Create visualization
analyzer.create_visualization(result, "output.png")
```

### Key Methods

#### `analyze_image()`

Main analysis method with automatic mask inference:

```python
result = analyzer.analyze_image(
    image_path="path/to/image.jpg",
    mask_path=None,  # Optional: explicit mask path
    threshold=0.5,
    auto_find_mask=True,  # Enable automatic inference
)
```

#### `_infer_mask_path()`

Manually infer mask path:

```python
mask_path = analyzer._infer_mask_path("path/to/image.jpg")
if mask_path:
    print(f"Found mask: {mask_path}")
```

#### `create_visualization()`

Generate professional visualization:

```python
visualization = analyzer.create_visualization(
    result,
    save_path="output.png",
    show_confidence=True,
    show_metrics=True,
)
```

## Output Format

### Analysis Results

The analysis returns a dictionary with the following structure:

```python
{
    "image_path": "path/to/image.jpg",
    "prediction_mask": np.ndarray,  # Binary prediction
    "probability_mask": np.ndarray,  # Confidence scores
    "threshold": 0.5,
    "prediction_shape": (256, 256),

    # Ground truth data (if available)
    "ground_truth_mask": np.ndarray,
    "metrics": {
        "precision": 0.85,
        "recall": 0.78,
        "f1": 0.81,
        "accuracy": 0.92,
    },
    "iou": 0.76,
}
```

### Visualization

The visualization includes:

1. **Original Image**: Input image
2. **Prediction**: Segmentation overlay
3. **Ground Truth**: Ground truth overlay (if available)
4. **Confidence**: Confidence heatmap
5. **Metrics**: Performance metrics (if available)

## Testing

### Test Script

Run the test script to verify automatic mask inference:

```bash
python scripts/test_auto_mask_inference.py
```

This script tests:

- Automatic mask finding in different directories
- Behavior when no mask directory is provided
- Correct file extension handling
- Full analysis pipeline

### Demo Script

Run the comprehensive demo:

```bash
python scripts/examples/prediction_analysis_demo.py
```

This demonstrates:

- Automatic mask inference
- Manual mask specification
- Prediction-only analysis
- Batch processing

## Troubleshooting

### Common Issues

#### 1. Checkpoint Not Found

```bash
Error: Checkpoint not found: outputs/checkpoints/model_best.pth.tar
```

**Solution**: Run a training experiment first or specify a valid checkpoint path.

#### 2. Mask Not Found

```bash
Warning: No mask found for image 98.jpg in data/train/masks
```

**Solutions**:

- Verify the mask directory contains the expected mask file
- Check that the mask has the same base filename as the image
- Ensure the mask has a supported extension (.png, .jpg, etc.)

#### 3. Import Errors

```bash
ModuleNotFoundError: No module named 'crackseg'
```

**Solution**: Ensure you're running from the project root directory.

#### 4. CUDA Out of Memory

```bash
RuntimeError: CUDA out of memory
```

**Solutions**:

- Use `--device cpu` to force CPU usage
- Reduce batch size or image resolution
- Close other GPU applications

### Debug Mode

Enable verbose logging for detailed information:

```bash
python scripts/analyze_predictions.py \
    --image data/train/images/98.jpg \
    --mask-dir data/train/masks \
    --verbose
```

## Best Practices

1. **Use Automatic Inference**: Leverage the automatic mask inference for convenience
2. **Organize Data**: Keep images and masks in separate directories with matching filenames
3. **Consistent Extensions**: Use `.png` for masks and `.jpg` for images
4. **Test First**: Use the test script to verify your setup
5. **Monitor Resources**: Use CPU mode if GPU memory is limited

## File Structure

The system expects this directory structure:

```bash
data/
├── train/
│   ├── images/
│   │   ├── 98.jpg
│   │   └── 99.jpg
│   └── masks/
│       ├── 98.png
│       └── 99.png
├── val/
│   ├── images/
│   └── masks/
└── test/
    ├── images/
    └── masks/
```

## Performance Tips

1. **GPU Usage**: Use CUDA for faster inference (default)
2. **Batch Processing**: Use batch mode for multiple images
3. **Memory Management**: Close visualizations to free memory
4. **Parallel Processing**: The system automatically handles GPU batching

## Integration

The prediction analysis system integrates with:

- **Training Pipeline**: Uses checkpoints from training experiments
- **Configuration System**: Leverages Hydra configurations
- **Visualization Tools**: Generates publication-ready figures
- **Evaluation Metrics**: Provides comprehensive performance analysis
