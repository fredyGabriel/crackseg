"""Markdown templates for experiment reports.

This module provides professional Markdown templates for generating
experiment reports in various formats and styles.
"""

from abc import ABC, abstractmethod
from typing import Any


class BaseMarkdownTemplate(ABC):
    """Base class for Markdown templates."""

    @abstractmethod
    def get_template_content(self) -> str:
        """Get template content."""
        pass

    def get_template_variables(self) -> dict[str, Any]:
        """Get template variables and their descriptions."""
        return {
            "title": "Report title",
            "experiment_id": "Experiment identifier",
            "experiment_name": "Experiment name",
            "generation_timestamp": "Report generation timestamp",
            "executive_summary": "Executive summary content",
            "key_findings": "List of key findings",
            "performance_metrics": "Performance metrics dictionary",
            "training_curves": "Training curves analysis",
            "recommendations": "List of recommendations",
            "technical_details": "Technical analysis details",
            "comparison_results": "Experiment comparison results",
            "publication_figures": "Publication-ready figures",
            "metadata": "Experiment metadata",
        }


class ExecutiveSummaryTemplate(BaseMarkdownTemplate):
    """Executive summary template for stakeholders."""

    def get_template_content(self) -> str:
        """Get executive summary template content."""
        return """# {{title}}

**Experiment Report - Executive Summary**
*Generated on {{generation_timestamp}}*

## 📊 Executive Summary

{{executive_summary}}

## 🎯 Key Findings

{{key_findings}}

## 📈 Performance Overview

{{performance_metrics}}

## 🚀 Recommendations

{{recommendations}}

## 📋 Experiment Details

- **Experiment ID**: {{experiment_id}}
- **Experiment Name**: {{experiment_name}}
- **Status**: {{status}}
- **Duration**: {{duration}}

## 📄 Full Report

For detailed technical analysis, see the complete report.

---
*Report generated by CrackSeg Experimental Reporting System*
"""


class TechnicalDetailedTemplate(BaseMarkdownTemplate):
    """Detailed technical template for engineers and researchers."""

    def get_template_content(self) -> str:
        """Get technical detailed template content."""
        return """# {{title}}

**Technical Experiment Report**
*Generated on {{generation_timestamp}}*

## 📋 Experiment Information

- **Experiment ID**: {{experiment_id}}
- **Experiment Name**: {{experiment_name}}
- **Configuration**: {{config_summary}}
- **Duration**: {{duration}}
- **Status**: {{status}}

## 🎯 Executive Summary

{{executive_summary}}

## 📊 Performance Analysis

### Key Metrics

{{performance_metrics}}

### Training Curves

{{training_curves}}

### Detailed Analysis

{{technical_details}}

## 🔍 Technical Details

### Model Architecture

{{model_architecture}}

### Training Configuration

{{training_config}}

### Data Configuration

{{data_config}}

## 📈 Results Analysis

{{results_analysis}}

## 🚀 Recommendations

{{recommendations}}

## 📁 Artifacts

{{artifacts}}

## 📄 Metadata

{{metadata}}

---
*Generated by CrackSeg Experimental Reporting System*
"""


class PublicationReadyTemplate(BaseMarkdownTemplate):
    """Publication-ready template for academic papers."""

    def get_template_content(self) -> str:
        """Get publication-ready template content."""
        return """# {{title}}

**Crack Segmentation Experiment Report**
*{{generation_timestamp}}*

## Abstract

{{abstract}}

## 1. Introduction

{{introduction}}

## 2. Methodology

### 2.1 Model Architecture

{{model_architecture}}

### 2.2 Training Configuration

{{training_config}}

### 2.3 Dataset

{{dataset_description}}

## 3. Results

### 3.1 Performance Metrics

{{performance_metrics}}

### 3.2 Training Analysis

{{training_curves}}

### 3.3 Comparative Analysis

{{comparison_results}}

## 4. Discussion

{{discussion}}

## 5. Conclusions

{{conclusions}}

## 6. Future Work

{{future_work}}

## References

{{references}}

## Appendix

### A. Experimental Setup

{{experimental_setup}}

### B. Detailed Results

{{detailed_results}}

### C. Figures

{{publication_figures}}

---
*Generated by CrackSeg Experimental Reporting System*
"""


class ComparisonReportTemplate(BaseMarkdownTemplate):
    """Template for comparing multiple experiments."""

    def get_template_content(self) -> str:
        """Get comparison report template content."""
        return """# {{title}}

**Experiment Comparison Report**
*Generated on {{generation_timestamp}}*

## 📊 Executive Summary

{{executive_summary}}

## 🔍 Comparison Overview

{{comparison_overview}}

## 📈 Performance Comparison

### Key Metrics Comparison

{{performance_comparison}}

### Statistical Analysis

{{statistical_analysis}}

## 🏆 Best Performing Experiments

{{best_experiments}}

## 📊 Detailed Results

{{detailed_comparison}}

## 📈 Training Curves Comparison

{{training_curves_comparison}}

## 🎯 Key Insights

{{key_insights}}

## 🚀 Recommendations

{{recommendations}}

## 📋 Experiment Details

{{experiment_details}}

## 📄 Metadata

{{metadata}}

---
*Generated by CrackSeg Experimental Reporting System*
"""


class PerformanceAnalysisTemplate(BaseMarkdownTemplate):
    """Template focused on performance analysis."""

    def get_template_content(self) -> str:
        """Get performance analysis template content."""
        return """# {{title}}

**Performance Analysis Report**
*Generated on {{generation_timestamp}}*

## 📊 Performance Overview

{{performance_overview}}

## 🎯 Key Performance Indicators

{{kpi_analysis}}

## 📈 Training Performance

### Training Curves

{{training_curves}}

### Learning Rate Analysis

{{learning_rate_analysis}}

### Gradient Flow Analysis

{{gradient_flow_analysis}}

## 🔍 Validation Performance

{{validation_performance}}

## 📊 Test Performance

{{test_performance}}

## 🎯 Performance Insights

{{performance_insights}}

## 🚀 Optimization Opportunities

{{optimization_opportunities}}

## 📋 Performance Metadata

{{performance_metadata}}

---
*Generated by CrackSeg Experimental Reporting System*
"""


def get_template_class(template_name: str) -> type[BaseMarkdownTemplate]:
    """Get template class by name.

    Args:
        template_name: Name of the template class.

    Returns:
        Template class.

    Raises:
        ValueError: If template class is not found.
    """
    template_classes = {
        "ExecutiveSummaryTemplate": ExecutiveSummaryTemplate,
        "TechnicalDetailedTemplate": TechnicalDetailedTemplate,
        "PublicationReadyTemplate": PublicationReadyTemplate,
        "ComparisonReportTemplate": ComparisonReportTemplate,
        "PerformanceAnalysisTemplate": PerformanceAnalysisTemplate,
    }

    if template_name not in template_classes:
        raise ValueError(f"Template class not found: {template_name}")

    return template_classes[template_name]
