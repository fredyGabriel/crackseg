<context>
# Overview  
This project aims to achieve state-of-the-art (SOTA) performance in pavement crack segmentation using deep learning, focusing on modular U-Net-based architectures. The solution is intended for researchers, civil engineers, and infrastructure maintenance teams who need accurate, automated detection of cracks in asphalt surfaces. The value lies in improving road safety, reducing manual inspection costs, and enabling scalable infrastructure monitoring.

# Core Features  
- Modular U-Net-based segmentation models (CNN, Swin Transformer V2, hybrid variants)
- Flexible configuration system using Hydra and YAML files
- Data pipeline for loading, augmenting, and splitting crack image datasets
- Training loop with support for mixed precision (AMP) and gradient accumulation
- Evaluation metrics: IoU, F1-Score, Precision, Recall
- Checkpointing, logging, and reproducibility utilities
- Test suite for all major components (unit and integration)
- Strict adherence to PEP 8, DRY, and modularity principles

# User Experience  
- User personas: ML researchers, engineers, students
- Key flows: Configure experiment → Run training → Evaluate results → Compare architectures
- UI/UX: Command-line driven, clear logging, structured outputs, easy config overrides
</context>
<PRD>
# Technical Architecture  
- System components:
  - Data handling: Dataset, transforms, dataloaders (PyTorch, Albumentations)
  - Model: Modular U-Net variants with interchangeable encoders, bottlenecks, decoders (ABCs)
  - Training: Trainer, losses, optimizers, schedulers, metrics
  - Utilities: Logging, checkpointing, config validation, device management
  - Configuration: Hydra-based YAML configs for all domains
  - Testing: Unit/integration tests for all modules
- Data models: Image (3x512x512), Mask (1x512x512, binary)
- APIs: Internal Python APIs, no external service integration
- Infrastructure: Local GPU (8GB VRAM), Conda environment, .env for sensitive data

# Development Roadmap  
- Phase 0: Setup repo, Conda env, .gitignore, README, .env, base utils
- Phase 1: Data pipeline (config, dataset, transforms, loading, tests)
- Phase 2: Model core (ABCs, CNN blocks, first U-Net, model factory, tests)
- Phase 3: Training/evaluation (losses, metrics, optimizers, schedulers, trainer, tests)
- Phase 4: Orchestration (main.py, config validation, integration tests)
- Phase 5: Modular expansion (ASPP, ConvLSTM, SwinV2, CBAM, new architectures, configs, tests)
- Phase 6: Advanced features, refinement, documentation, experiment management

# Logical Dependency Chain
- Foundation: Utilities, config, data pipeline
- First model: Baseline CNN U-Net
- Expand: Add new components/architectures iteratively
- Always: Write tests for each new module/feature
- Prioritize: Simple, modular, testable solutions; avoid scope creep

# Risks and Mitigations  
- Technical: VRAM limits (mitigated by SwinV2-Tiny, AMP, grad accumulation)
- MVP scope: Focus on baseline pipeline and one working model first
- Resource: Ensure all configs, code, and tests are modular and reusable
- Coding standards: Enforce PEP 8, DRY, modularity, and config-driven design

# Appendix  
- Research: "A state-of-the-art survey of deep learning models for automated pavement crack segmentation.pdf"
- Key terms: ABC, AMP, CBAM, CNN, Hydra, IoU, SOTA, U-Net, VRAM, YAML
- Coding and workflow rules: See coding-preferences.mdc, workflow-preferences.mdc
</PRD> 