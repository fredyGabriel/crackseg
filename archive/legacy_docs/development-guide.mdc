
# ARCHIVO - CÓDIGO OBSOLETO
# Archivo: development-guide.mdc
# Fecha de archivo: 2025-06-02 00:02:08
# Razón: Archivo ya ubicado en old_stuff con baja relevancia
# Proyecto: CrackSeg - Deep Learning para Segmentación de Grietas
# Subtarea: 11.3 - Archive Files Marked for Removal
#
# IMPORTANTE: Este archivo ha sido marcado como obsoleto durante el proceso
# de limpieza de código. Se mantiene archivado por precaución y puede ser
# restaurado si se descubre que aún es necesario.
#
# Para restaurar este archivo, contactar al equipo de desarrollo.
# ===============================================================================

---
description: Project Development Guide
globs: 
alwaysApply: false
---
# Project Development Guide (`development-guide.mdc`)

This guide outlines a suggested step-by-step process for developing the pavement crack segmentation project. It aims to build upon a solid foundation, aligning with the objectives, architectures, and constraints defined in `general-context.mdc`, `structural-guide.mdc`, `workflow-preferences.mdc`, and other relevant project documents.

**For detailed coding style, file size, and modularity rules, refer to `rules/coding-preferences.mdc`. For workflow, testing, and process guidelines, see `rules/workflow-preferences.mdc`.**

See also: [Glossary of Key Terms](mdc:glossary.mdc)

## Table of Contents

- [Phase 0: Initial Setup, Environment, and Foundation](mdc:#phase-0-initial-setup-environment-and-foundation)
- [Phase 1: Reliable Data Pipeline](mdc:#phase-1-reliable-data-pipeline)
- [Phase 2: Model Core - Abstractions and First Architecture](mdc:#phase-2-model-core---abstractions-and-first-architecture)
- [Phase 3: Core Training and Evaluation Mechanisms](mdc:#phase-3-core-training-and-evaluation-mechanisms)
- [Phase 4: Orchestration with main.py](mdc:#phase-4-orchestration-with-mainpy)
- [Phase 5: Modular Expansion - New Components and Architectures](mdc:#phase-5-modular-expansion---new-components-and-architectures)
- [Phase 6: Advanced Features, Refinement, and Documentation](mdc:#phase-6-advanced-features-refinement-and-documentation)
- [Handling Sensitive Data and Paths](mdc:#handling-sensitive-data-and-paths)
- [Data and Model Versioning with DVC](mdc:#data-and-model-versioning-with-dvc)
- [Experiment Management and Comparison](mdc:#experiment-management-and-comparison)
- [Final Note](mdc:#final-note)

*Progress Tracking Note: Use the `project_structure.mdc` file with status markers (e.g., ✅, `[x]`, `(DONE)`) and Git commits to track your progress through this guide.*

## Phase 0: Initial Setup, Environment, and Foundation

1.  **Repository and Environment:**
    * Initialize a Git repository (`git init`).
    * Create and configure the `.gitignore` file.
    * Define the base environment in `environment.yaml`. **Key Dependencies:** Include `python`, `pytorch`, `torchvision`, `hydra-core`, `omegaconf`, `timm`, `albumentations`, `pytest`, etc. Create the environment (e.g., `conda env create -f environment.yaml`).
    * Write an initial version of `README.md` with the project overview.
    * **Constraint Awareness:** Be mindful of the **8GB VRAM limitation** from the start and *throughout* development. This will influence model choices (e.g., preferring SwinV2-**Tiny**), batch sizes, and the necessity of **AMP** and **Gradient Accumulation**.
2.  **Core Utilities (`src/utils/`):**
    * Develop initial utility modules:
        * `src/utils/seeds.py`: For reproducibility.
        * `src/utils/device.py`: For CPU/GPU management.
        * `src/utils/logging.py`: Basic logger setup (can be refined later).
        * `src/utils/exceptions.py`: Define custom exceptions early if anticipated.
        * `src/utils/__init__.py`: For module exports.
    * ***Testing:*** Write robust unit tests for these utilities in `tests/utils/` *concurrently* or *immediately after* implementation. Adhere to the testing scope guidelines in `workflow-preferences.mdc` and the code style and file size rules in `coding-preferences.mdc`.
3.  **Base Configuration (Hydra):**
    * Create the basic `config/` directory structure.
    * Define `config/config.yaml` with the initial `defaults` structure.
    * Define `configs/training/logging/logging_base.yaml` (LOGGING ONLY) and `configs/training/logging/checkpoints.yaml` (CHECKPOINTS ONLY) as separate files.
    * Consider defining initial configuration schemas in `src/utils/config_validation/schemas/` even if the full validation logic (`validator.py`) is implemented later.

## Phase 1: Reliable Data Pipeline

4.  **Data Configuration:**
    * Define parameters in `config/data/dataset.yaml` (paths, `image_size: [512, 512]`, batch_size, etc.) and `config/data/augmentation.yaml` (list of transforms). Define necessary parameters for this phase; configuration can evolve later.
5.  **Dataset Implementation (`CrackDataset`):**
    * Implement the dataset class in `src/data/dataset.py`, including logic for finding image/mask pairs and loading data.
    * ***Testing:*** Write unit tests in `tests/data/test_dataset.py`.
6.  **Transformations (Albumentations):**
    * Implement functions to create Albumentations pipelines in `src/data/transforms.py`.
    * ***Testing:*** Write tests/validations in `tests/data/test_transforms.py` (or similar).
7.  **Data Loading (`create_dataloaders`):**
    * Implement the dataloader creation function in `src/data/loading.py`.
    * ***Testing:*** Write unit/integration tests in `tests/data/test_loading.py`.
8.  **Pipeline Integration Test:**
    * Develop `tests/integration/test_data_pipeline.py` to ensure the entire data loading and preprocessing flow works correctly.

## Phase 2: Model Core - Abstractions and First Architecture

9.  **Interfaces (Abstract Base Classes - ABCs):**
    * **Critical Step:** Define the ABCs in `src/models/components/_base.py` (`BaseEncoder`, `BaseBottleneck`, `BaseDecoder`). These interfaces serve as the **contract** for all future components, ensuring the modularity and interchangeability central to this project's goals.
    * ***Testing:*** Basic tests to ensure abstract classes cannot be instantiated directly.
10. **Fundamental Components (CNN/U-Net):**
    * Implement reusable blocks in `src/models/components/cnn_blocks.py` and `src/models/components/unet_blocks.py`. Ensure they are configurable (channels, normalization, activation).
    * ***Testing:*** Write comprehensive unit tests for these components in `tests/models/components/`, following the modularity and file size recommendations in `coding-preferences.mdc`.
11. **First Concrete Architecture (CNN U-Net):**
    * Implement the `CnnUnet` architecture in `src/models/architectures/cnn_unet.py`, **explicitly using the defined ABCs and the CNN/U-Net components**. This establishes the baseline model and the pattern for assembling components.
    * ***Testing:*** Write tests for this architecture in `tests/models/architectures/` (output shape checks, basic forward pass execution).
12. **Model Configuration and Factory:**
    * Define the `config/model/cnn_unet.yaml` configuration file. **Proactively include (even if commented out or set to `false`) potential parameters for future CBAM integration** (e.g., `use_cbam_in_decoder: false`, `cbam_reduction_ratio: 16`) to structure the config early.
    * Implement the `ModelFactory` (or `create_model` function) in `src/models/model_factory.py`, initially supporting only `CnnUnet`.
    * ***Testing:*** Write tests for the factory in `tests/models/test_factory.py`.

## Phase 3: Core Training and Evaluation Mechanisms

13. **Losses and Metrics:**
    * Implement necessary loss functions (e.g., Dice, BCE) in `src/training/losses.py`. Define the `loss` section in `config/training/training.yaml`.
    * ***Testing:*** Unit tests for loss functions.
    * Implement key metrics (IoU, F1) in `src/evaluation/metrics.py`. Define `config/evaluation/metrics.yaml` and `config/evaluation/thresholds.yaml`.
    * ***Testing:*** Unit tests for metrics.
14. **Optimizers and Schedulers:**
    * Implement logic to create optimizers and schedulers in `src/training/optimizers.py` and `src/training/schedulers.py` based on `config/training/training.yaml`.
    * ***Testing:*** Unit tests for these factory functions.
15. **Checkpointing:**
    * Fully implement checkpoint saving/loading logic in `src/utils/checkpointing.py`. Define `configs/training/logging/checkpoints.yaml`.
    * ***Testing:*** Unit tests in `tests/utils/test_checkpointing.py`.
16. **Trainer and Evaluator:**
    * Implement the main training loop (`train_one_epoch`) and evaluation logic (`evaluate`) in `src/training/trainer.py`. **Crucially, integrate handling for AMP (`torch.cuda.amp`) and Gradient Accumulation here**, controlled by parameters in `config/training/training.yaml`, to address VRAM constraints effectively.
    * Implement `src/evaluation/evaluator.py` if separate or more complex evaluation logic is needed.
    * ***Testing:*** Write unit/integration tests for the `trainer` and `evaluator` in `tests/training/` and `tests/evaluation/`. Remember the workflow guidelines regarding testing scope and caution when modifying external files.

## Phase 4: Orchestration with `main.py`

17. **Entry Point (`main.py`):**
    * Before any other operation, configuration validation using the defined schemas must be executed. If validation fails, the program must abort.
    * Develop `src/main.py` using Hydra (`@hydra.main`).
    * Orchestrate the entire workflow: Hydra init -> Utils setup -> Data loading -> Model creation (factory) -> Training setup -> Main loop (`trainer`) -> Checkpointing -> Final evaluation.
    * ***Testing:*** Write tests for `main.py` in `tests/test_main.py` (likely integration tests verifying execution with simple configs).
18. **Key Integration Tests:**
    * Develop/complete `tests/integration/test_training_flow.py` and `tests/integration/test_model_inference.py`.

## Phase 5: Modular Expansion - New Components and Architectures

19. **Iterative Component Implementation:**
    * Implement `src/models/components/aspp.py`. ***Testing***. *Consider its potential integration points during development.*
    * Implement `src/models/components/convlstm.py`. ***Testing***.
    * Implement `src/models/components/swin_v2_utils.py`. **Important:** Ensure the integration supports configuring the **Tiny** variant (`swinv2_tiny_*`) due to VRAM limits. ***Testing***.
    * Implement `src/models/components/cbam.py`. ***Testing***. *Consider its potential integration points (decoder, skips) during development.*
20. **Iterative Architecture Implementation:**
    * **For each new architecture** (RSC-UNet, CNN-ConvLSTM, SwinV2-Hybrid, Full-SwinV2):
        * Implement the architecture class in `src/models/architectures/`, **adhering to the ABCs** and using the required components.
        * Define its **YAML configuration** in `config/model/`. **Include flags to control CBAM integration** (e.g., `use_cbam_on_skips: true`).
        * Update `src/models/model_factory.py` and its ***tests***.
        * Write specific ***tests*** for the new architecture.
21. **CBAM Integration Example:**
    * As a concrete step, modify one of the previously implemented architectures (e.g., `CnnUnet` in `src/models/architectures/cnn_unet.py`) to read the CBAM flags from its configuration and conditionally apply the `CBAM` module at the designated points (e.g., after decoder blocks and/or on skip connections).
    * Ensure existing tests pass and add new tests if needed to verify CBAM's functional integration.

## Phase 6: Advanced Features, Refinement, and Documentation

22. **Configuration Validation:**
    * Implement the validator logic in `src/utils/config_validation/validator.py` using the defined schemas. Integrate it into `main.py`.
    * ***Testing:*** Write tests in `tests/utils/config_validation/`.
23. **General Refinement:**
    * Refine logging (`src/utils/logging.py`, `configs/training/logging/logging_base.yaml`).
    * Complete all remaining tests (unit and integration), aiming for good coverage.
    * Add visualizations or advanced metrics if necessary (`outputs/`).
    * Conduct experiments, tune hyperparameters based on results.
    * Finalize and detail the `README.md` with comprehensive setup, training, and evaluation instructions.

---

## Handling Sensitive Data and Paths

- All sensitive information and environment-specific paths (e.g., dataset locations, API keys) must be managed via a `.env` file at the project root and never hardcoded or committed to version control.
- Use the `python-dotenv` library to load variables from `.env` at runtime. Reference them in code with `os.getenv('VARIABLE_NAME')` and in Hydra configs with `${oc.env:VARIABLE_NAME}`.
- Example `.env` variables:
  ```