# ARCHIVO - CÓDIGO OBSOLETO

Archivo: project-structure.mdc
Fecha de archivo: 2025-06-02 00:02:08
Razón: Archivo ya ubicado en old_stuff con baja relevancia
Proyecto: CrackSeg - Deep Learning para Segmentación de Grietas
Subtarea: 11.3 - Archive Files Marked for Removal

IMPORTANTE: Este archivo ha sido marcado como obsoleto durante el proceso
de limpieza de código. Se mantiene archivado por precaución y puede ser
restaurado si se descubre que aún es necesario

Para restaurar este archivo, contactar al equipo de desarrollo

===============================================================================

---
    description: Project file structure
    globs:
    alwaysApply: false
---

## Project Structure Reference

**Load when**: Navigating the codebase, creating new files, understanding module organization,
  locating specific components, or implementing new features in the correct location.

## Live Project Structure

The project structure is maintained in one location:

- **Auto-Generated**: `docs/reports/project_tree.md` - Generated by script

**Update command**: `python scripts/utils/generate_project_tree.py`

## Project Organization Overview

```txt
crackseg/                          # Project root
├── src/                          # Source code (main implementation)
├── configs/                      # Hydra configuration files
├── tests/                        # Test suite (unit & integration)
├── data/                         # Dataset samples
├── docs/                         # Documentation & guides
├── scripts/                      # Utility scripts & tools
├── .cursor/                      # Cursor AI configuration
│   └── rules/                    # Development rules
└── outputs/                      # Training outputs (gitignored)
```

## Key Directories Guide

### Source Code (`src/`)

Core implementation following modular architecture:

- **`model/`**: Neural network components
  - `architectures/`: Complete model definitions
  - `encoder/`: Feature extraction modules (CNN, Swin)
  - `decoder/`: Upsampling and reconstruction
  - `bottleneck/`: Middle processing layers (ASPP, ConvLSTM)
  - `factory/`: Dynamic model creation
- **`training/`**: Training pipeline
  - `losses/`: Loss functions with registry system
  - `metrics/`: Evaluation metrics
  - `trainer.py`: Main training loop
- **`data/`**: Data handling
  - `datasets.py`: Dataset classes
  - `transforms.py`: Augmentation pipelines
- **`utils/`**: Shared utilities
  - `config/`: Configuration management
  - `checkpointing/`: Model save/load
  - `logging/`: Training monitors

### Configuration (`configs/`)

Hierarchical Hydra configs for experiments:

- **`model/`**: Architecture configurations
  - `architectures/`: Full model configs
  - `encoder/`, `decoder/`, `bottleneck/`: Component configs
- **`training/`**: Training settings
  - `loss/`: Loss function configs
  - `lr_scheduler/`: Learning rate schedules
  - `metric/`: Metric configurations
- **`data/`**: Dataset configurations
  - `dataloader/`: Batch settings
  - `transform/`: Augmentation settings

### Testing (`tests/`)

Comprehensive test coverage:

- **`unit/`**: Isolated component tests
  - Mirrors `src/` structure exactly
  - One test file per source module
- **`integration/`**: System tests
  - `model/`: Architecture integration
  - `training/`: Pipeline tests
  - `config/`: Configuration validation

### Documentation (`docs/`)

- **`guides/`**: Development workflows
- **`reports/`**: Analysis and coverage reports
- **`designs/`**: Architecture decisions

## File Naming Conventions

### Python Files

- **Source**: `snake_case.py` (e.g., `swin_encoder.py`)
- **Tests**: `test_<module_name>.py` (e.g., `test_swin_encoder.py`)
- **Scripts**: `<action>_<target>.py` (e.g., `generate_project_tree.py`)
- **Temporary**: `temp_<description>.py` (e.g., `temp_data_analysis.py`)

### Configuration Files

- **Hydra**: `<component>_<variant>.yaml` (e.g., `unet_swin.yaml`)
- **Default**: `default.yaml` in each config directory

### Documentation

- **Guides**: `UPPERCASE_TOPIC.md` (e.g., `WORKFLOW_TRAINING.md`)
- **Specs**: `<feature>_specification.md` (e.g., `checkpoint_format_specification.md`)

## Navigation Quick Reference

| Need to... | Look in... |
|---|---|
| Add new model architecture | `src/model/architectures/` |
| Create custom loss function | `src/training/losses/` |
| Add data augmentation | `src/data/transforms.py` |
| Configure experiment | `configs/` (various subdirs) |
| Write unit tests | `tests/unit/` (mirror src structure) |
| Add utility function | `src/utils/` (appropriate submodule) |
| Update documentation | `docs/guides/` |
| Create analysis script | `scripts/reports/` |

## Best Practices

1. **Maintain Structure Consistency**
   - New modules should follow existing patterns
   - Tests must mirror source structure
   - Configs should use established hierarchy
2. **Update Project Tree**
   - Run update script after structural changes
   - Commit updated `project_tree.mdc` with changes
   - Keep max depth at 6 for readability
3. **File Placement Guidelines**
   - Implementation → `src/`
   - Configuration → `configs/`
   - Tests → `tests/`
   - Documentation → `docs/`
   - One-off scripts → `scripts/`

## References

- **Complete Tree**: [project_tree.md](mdc:docs/reports/project_tree.md)
- **Development Workflow**: [development-workflow.mdc](mdc:@/rules/development-workflow.mdc)
- **Testing Standards**: [testing-standards.mdc](mdc:@/rules/testing-standards.mdc)
