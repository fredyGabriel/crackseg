name: E2E Testing with Docker Infrastructure

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'scripts/gui/**'
      - 'tests/e2e/**'
      - 'infrastructure/testing/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'scripts/gui/**'
      - 'tests/e2e/**'
      - 'infrastructure/testing/**'
  workflow_dispatch:
    inputs:
      browsers:
        description: 'Browsers to test'
        default: 'chrome,firefox'
        type: string
      test_suite:
        description: 'Test suite'
        default: 'smoke'
        type: choice
        options: ['smoke', 'regression', 'full']

env:
  COMPOSE_PROJECT_NAME: crackseg-ci
  DOCKER_BUILDKIT: 1
  CI: true
  TEST_HEADLESS: true
  COVERAGE_ENABLED: true

jobs:
  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Validate Docker Infrastructure
        run: |
          cd infrastructure/testing
          docker-compose -f docker/docker-compose.test.yml config > /dev/null
          echo "âœ… Infrastructure validation successful"

  build-images:
    name: Build Test Images
    runs-on: ubuntu-latest
    needs: validate-infrastructure
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Streamlit Image
        run: |
          cd infrastructure/testing
          docker build -f docker/Dockerfile.streamlit -t crackseg-streamlit:ci ../../

      - name: Build Test Runner Image
        run: |
          cd infrastructure/testing
          docker build -f docker/Dockerfile.test-runner -t crackseg-test-runner:ci ../../

  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: build-images
    timeout-minutes: 30

    strategy:
      matrix:
        browser: [chrome, firefox]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Test Environment
        run: |
          cd infrastructure/testing
          cp config/env.test.template .env.test
          echo "BROWSER=${{ matrix.browser }}" >> .env.test
          echo "CI=true" >> .env.test
          mkdir -p ../../test-results ../../test-artifacts

      - name: Start Docker Infrastructure
        run: |
          cd infrastructure/testing
          ./scripts/docker-stack-manager.sh start --browser ${{ matrix.browser }} --ci-mode
          ./scripts/docker-stack-manager.sh wait-ready --timeout 300

      - name: Run E2E Tests
        run: |
          cd tests/docker
          ./scripts/e2e-test-orchestrator.sh smoke \
            --browser ${{ matrix.browser }} \
            --parallel-workers 2 \
            --coverage \
            --ci-mode

      - name: Collect Artifacts
        if: always()
        run: |
          cd tests/docker
          ./scripts/artifact-manager.sh collect --compress

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 30

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.browser }}
          path: test-artifacts/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          cd tests/docker
          ./scripts/docker-stack-manager.sh cleanup --force

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.ref == 'refs/heads/develop' && success()
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          cd tests/docker
          echo "ðŸš€ Deploying to staging..."
          ./scripts/docker-stack-manager.sh deploy --environment staging