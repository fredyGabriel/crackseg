---
description: 
globs: test*.py
alwaysApply: false
---
- **Tests should reflect the real API and behavior of production code**
    - If a test fails because it expects files, names, paths, or outputs that are not actually produced by the real code logic, the test must be adapted to match the actual behavior and public API of the production code.
    - **Do not modify production code just to satisfy arbitrary details in tests** (e.g., creating files or outputs that have no functional purpose, just to make a test pass).
    - Correct example:
      ```python
      # ✅ The test checks for 'evaluation_results.txt', which is actually generated by the function.
      assert os.path.exists(os.path.join(metrics_dir, 'evaluation_results.txt'))
      ```
    - Incorrect example:
      ```python
      # ❌ Production code generates 'evaluation_summary.txt' only because the test expects it, even though it's not needed.
      with open(summary_path, "w") as f:
          ...
      ```
    - If a change in production output is required, first discuss and document the functional reason, then update both code and tests coherently.
    - Keep tests as a validation of real functionality, not as an arbitrary specification.

- **Motivation and context**
    - This rule ensures production code remains clean, consistent, and focused on real functionality, while tests fulfill their role as validation and do not dictate accidental implementation details.
    - It makes maintenance and code evolution easier, avoiding technical debt and unnecessary files/outputs.

