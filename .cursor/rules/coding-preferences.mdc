---
description:
globs:
alwaysApply: true
---
# Code Quality Standards (Mandatory)

- **All Python code must pass three quality gates before commit:**
  - **Type checking**: `basedpyright .` with zero errors or warnings
  - **Formatting**: `black .` applied consistently
  - **Linting**: `ruff .` with no violations
  - **Configuration**: See `configs/linting/config.yaml` and `pyproject.toml`

- **Type annotations are mandatory for all code:**
  - Every function, method, class attribute, and module-level variable must have explicit type hints
  - No `Any` types without clear justification and documentation
  - Use proper generic types: `List[str]`, `Dict[str, int]`, etc.
  - Example:
    ```python
    from typing import List, Optional

    def process_data(items: List[str], threshold: Optional[int] = None) -> Dict[str, int]:
        """Process data items and return statistics."""
        return {"count": len(items), "threshold": threshold or 0}
    ```

- **Pre-commit workflow:**
  ```bash
  black .
  ruff . --fix
  basedpyright .
  # Only commit if all three pass
  ```

# Code Structure and Organization

- **Modular Design:**
  - Functions/classes should have single, clear responsibilities
  - Modules should be focused and cohesive (200-300 lines preferred, max 400)
  - Place code in appropriate directories following `project-structure.mdc`
  - No one-off scripts in `src/` - use `scripts/` for utilities

- **PEP 8 Compliance:**
  - Follow PEP 8 naming conventions: `snake_case` for variables/functions, `PascalCase` for classes
  - Black handles line length and formatting - accept its decisions
  - Example:
    ```python
    class DataProcessor:  # PascalCase for classes
        def __init__(self, config_path: str) -> None:
            self.config_path = config_path  # snake_case for attributes

        def process_batch(self, data_items: List[str]) -> ProcessResult:  # snake_case for methods
            pass
    ```

- **DRY Principle:**
  - Extract common functionality into reusable functions/classes
  - Use inheritance or composition to avoid code duplication
  - Create utility modules for shared logic

# Documentation and Comments

- **Docstrings (Required):**
  - All modules, classes, and public functions must have English docstrings
  - Use Google-style or NumPy-style format consistently
  - Example:
    ```python
    def calculate_metrics(predictions: torch.Tensor, targets: torch.Tensor) -> Dict[str, float]:
        """Calculate evaluation metrics for model predictions.

        Args:
            predictions: Model output tensor of shape (N, C, H, W)
            targets: Ground truth tensor of shape (N, H, W)

        Returns:
            Dictionary containing IoU, accuracy, and F1 scores
        """
    ```

- **Comments (Minimal):**
  - Only comment non-obvious business logic or algorithmic decisions
  - Avoid obvious comments: `# increment counter` for `counter += 1`

# Reliability and Error Handling

- **Error Handling:**
  - Use specific exception types, not bare `except:`
  - Handle expected errors gracefully with meaningful messages
  - Let unexpected errors bubble up with proper stack traces
  - Example:
    ```python
    def load_config(path: str) -> Config:
        try:
            with open(path, 'r') as f:
                return Config.from_dict(yaml.safe_load(f))
        except FileNotFoundError:
            raise ConfigError(f"Configuration file not found: {path}")
        except yaml.YAMLError as e:
            raise ConfigError(f"Invalid YAML in {path}: {e}")
    ```

- **Test Coverage:**
  - Write unit tests for all public functions and methods
  - Include integration tests for key workflows
  - Aim for >80% coverage on core functionality

# Configuration and Dependencies

- **Dependency Management:**
  - Use `environment.yml` for conda packages and versions
  - Pin specific versions for reproducibility
  - Document any special installation requirements

- **Configuration Management:**
  - All parameters configurable via Hydra/YAML files
  - Store sensitive config in `.env` files (never committed)
  - Use type-safe config classes with validation
  - Example:
    ```python
    @dataclass
    class TrainingConfig:
        learning_rate: float
        batch_size: int
        epochs: int

        def __post_init__(self) -> None:
            if self.learning_rate <= 0:
                raise ValueError("Learning rate must be positive")
    ```

- **File Encoding:**
  - All Python files must use UTF-8 encoding
  - Include `# -*- coding: utf-8 -*-` only if needed for compatibility

# References

- **Project Structure**: [project-structure.mdc](mdc:.cursor/guides/project-structure.mdc)
- **Architecture Patterns**: [structural-guide.mdc](mdc:.cursor/guides/structural-guide.mdc)
- **Development Process**: [development-guide.mdc](mdc:.cursor/guides/development-guide.mdc)
- **Linting Configuration**: `configs/linting/config.yaml`, `pyproject.toml`
- **Project Context**: [general-context.mdc](mdc:.cursor/guides/general-context.mdc)

## Quick References
- [general-context.mdc](mdc:.cursor/guides/general-context.mdc): Project Proposal & Technical Discussion
- [project-structure.mdc](mdc:.cursor/guides/project-structure.mdc): Directory Tree
- [structural-guide.mdc](mdc:.cursor/guides/structural-guide.mdc): Structural Guide. Minimal structural outline
- [development-guide.mdc](mdc:.cursor/guides/development-guide.mdc): outlines a suggested step-by-step process for developing the pavement crack segmentation project.
- [glossary.mdc](mdc:.cursor/guides/glossary.mdc): Glossary of Key Terms

---
description: Require full type annotations, Black formatting, and Ruff linting for all Python code
globs: src/**/*.py, tests/**/*.py, scripts/**/*.py
alwaysApply: true
---

- **Mandatory Code Quality Standards:**
  - All Python code must include explicit type annotations for all functions, methods, and variables, sufficient to satisfy basedpyright with zero errors or warnings.
  - All code must be formatted using Black and linted with Ruff, with no outstanding issues.
- **Type annotations are not optional:**
  - Every new or modified function, method, and class must include complete type hints.
  - All code must be reviewed and updated to maintain full type coverage.
- **No code may be committed unless it passes Black, Ruff, and basedpyright.**
- **Motivation:**
  - This rule guarantees code consistency, readability, and robust static analysis, reducing bugs and onboarding time.