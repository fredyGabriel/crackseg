[tool:pytest]
# =============================================================================
# CrackSeg - Pytest Configuration for Docker E2E Testing
# =============================================================================
# Purpose: Configure pytest for containerized end-to-end testing of
#          Streamlit GUI application with Selenium automation
# =============================================================================

# Test discovery
testpaths = tests/e2e tests/integration
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Minimum version requirements
minversion = 8.0

# Add command line options
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --showlocals
    --durations=10
    --color=yes
    --code-highlight=yes

# Markers for test categorization
markers =
    # Test types
    e2e: End-to-end tests using browser automation
    integration: Integration tests for component interactions
    gui: GUI-specific tests requiring Streamlit
    selenium: Tests using Selenium WebDriver
    visual: Visual regression tests comparing screenshots

    # Test complexity
    slow: Tests that take longer than 30 seconds
    fast: Tests that complete in under 5 seconds

    # Test scenarios
    smoke: Basic functionality tests for quick validation
    regression: Tests for previously fixed bugs
    critical: Mission-critical functionality tests

    # Browser-specific
    chrome: Tests specific to Chrome browser
    firefox: Tests specific to Firefox browser
    edge: Tests specific to Edge browser

    # Environment-specific
    headless: Tests that run in headless mode
    headed: Tests that require GUI display
    docker: Tests designed for Docker environment

    # Data requirements
    with_data: Tests requiring test data files
    no_data: Tests that don't require external data

    # Performance
    load: Load testing scenarios
    stress: Stress testing scenarios
    performance: Performance measurement tests

# Test timeout settings
timeout = 300
timeout_method = thread

# Coverage configuration
addopts =
    --cov=src
    --cov=scripts/gui
    --cov-branch
    --cov-report=html:test-results/coverage
    --cov-report=xml:test-results/coverage.xml
    --cov-report=json:test-results/coverage.json
    --cov-report=term-missing
    --cov-fail-under=70

# Parallel execution
addopts = -n auto

# HTML reporting
addopts =
    --html=test-results/report.html
    --self-contained-html

# JSON reporting
addopts =
    --json-report
    --json-report-file=test-results/test-report.json

# Log configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = test-results/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Warnings configuration
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning:streamlit.*
    ignore::PendingDeprecationWarning
    error::pytest.PytestUnraisableExceptionWarning

# Django-like test database configuration (if needed)
# DJANGO_SETTINGS_MODULE = tests.settings
# DATABASE_URL = sqlite:///test-results/test.db

# Environment variables for tests
env =
    TEST_ENV = docker
    STREAMLIT_BROWSER_GATHER_USAGE_STATS = false
    STREAMLIT_SERVER_HEADLESS = true
    STREAMLIT_SERVER_PORT = 8501
    STREAMLIT_THEME_BASE = light
    PYTEST_CURRENT_TEST = true

# Custom pytest options
# These can be used from command line: pytest --browser=chrome --headless
addopts =
    --browser=chrome
    --headless
    --window-size=1920,1080
    --implicit-wait=10
    --page-load-timeout=30

# Test discovery patterns
testpaths =
    tests/e2e/
    tests/integration/gui/

# Ignore patterns
norecursedirs =
    .*
    __pycache__
    node_modules
    .git
    .pytest_cache
    htmlcov
    .coverage*

# Collection configuration
collect_ignore = [
    "setup.py",
    "conftest.py"
]

# Doctest configuration
doctest_optionflags =
    NORMALIZE_WHITESPACE
    IGNORE_EXCEPTION_DETAIL
    ALLOW_UNICODE

# xvfb configuration for headless display
addopts = --xvfb-width=1920 --xvfb-height=1080 --xvfb-colordepth=24

# Rerun failed tests configuration
addopts = --reruns=2 --reruns-delay=1

# Test ordering
addopts = --order-dependencies --order-group-scope=module

# Memory profiling (optional)
# addopts = --profile-svg --profile

# Benchmark configuration (if using pytest-benchmark)
# addopts = --benchmark-only --benchmark-sort=mean