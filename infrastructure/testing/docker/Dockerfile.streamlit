# =============================================================================
# CrackSeg - Multi-Stage Dockerfile for E2E Testing
# =============================================================================
# Purpose: Create containerized environment for end-to-end testing of
#          Streamlit GUI application with Selenium automation
#
# Architecture: Multi-stage build optimized for testing workflow
# Base: Python 3.12 on Debian Bullseye for stability and compatibility
# =============================================================================

# =============================================================================
# Stage 1: Base Dependencies
# =============================================================================
FROM python:3.12-slim-bullseye AS base

LABEL maintainer="CrackSeg Project"
LABEL description="Multi-stage Docker environment for CrackSeg E2E testing"
LABEL version="1.0"

# Set environment variables for Python behavior
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Create non-root user for security
RUN groupadd --gid 1000 testuser && \
    useradd --uid 1000 --gid testuser --shell /bin/bash --create-home testuser

# Install system dependencies required for testing
RUN apt-get update && apt-get install -y --no-install-recommends \
    # System utilities
    curl \
    wget \
    git \
    build-essential \
    # Graphics and multimedia (for OpenCV)
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    # Network and security
    ca-certificates \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# =============================================================================
# Stage 2: Python Dependencies
# =============================================================================
FROM base AS dependencies

# Copy requirements files
COPY requirements.txt ./
COPY tests/requirements-testing.txt ./requirements-testing.txt

# Install Python dependencies in order of stability
# 1. Core dependencies first (most stable)
RUN pip install --upgrade pip setuptools wheel

# 2. Testing dependencies (frequently updated)
RUN pip install -r requirements-testing.txt

# 3. Main application dependencies (largest, cached separately)
RUN pip install -r requirements.txt

# =============================================================================
# Stage 3: Testing Environment
# =============================================================================
FROM dependencies AS test-env

# Install additional testing tools
RUN pip install --no-deps \
    pytest-xdist>=3.3.0 \
    pytest-html>=4.1.0 \
    pytest-metadata>=3.0.0 \
    selenium>=4.15.0 \
    webdriver-manager>=4.0.0

# Create directories for test artifacts
RUN mkdir -p /app/test-results/{screenshots,logs,reports,videos} && \
    mkdir -p /app/test-data && \
    chown -R testuser:testuser /app

# Switch to non-root user
USER testuser

# Set Python path to include source directory
ENV PYTHONPATH=/app/src:/app

# =============================================================================
# Stage 4: Application Runtime
# =============================================================================
FROM test-env AS runtime

# Copy application source code
COPY --chown=testuser:testuser . /app/

# Copy test configuration files
COPY --chown=testuser:testuser tests/docker/pytest.ini /app/
COPY --chown=testuser:testuser tests/docker/docker-entrypoint.sh /app/
COPY --chown=testuser:testuser tests/e2e/ /app/tests/e2e/

# Make entrypoint script executable
USER root
RUN chmod +x /app/docker-entrypoint.sh
USER testuser

# Health check for Streamlit application
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8501/_stcore/health || exit 1

# Default ports
EXPOSE 8501

# Default command runs the entrypoint script
CMD ["/app/docker-entrypoint.sh"]