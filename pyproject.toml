[project]
name = "crackseg"
version = "0.2.0"
description = "A project for pavement crack segmentation using PyTorch."
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "CrackSeg Team", email = "team@crackseg.org"}
]
keywords = ["deep-learning", "computer-vision", "segmentation", "pytorch", "crack-detection"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
]

# Core dependencies for the project
dependencies = [
    # Core ML Framework
    "torch>=2.7.0",
    # REMOVED: torchvision - replaced by timm + albumentations (see environment.yml)

    # Computer Vision & Image Processing
    "opencv",  # Aligned with conda package name (was opencv-python)
    "pillow",
    "albumentations",
    "scikit-image",

    # Data Processing & Analysis
    "numpy",
    "pandas",
    "scipy",
    "scikit-learn",

    # Model Libraries
    "timm",
    "segmentation-models-pytorch",

    # Configuration & Utilities
    "hydra-core",
    "omegaconf",
    "pyyaml",
    "toml",
    "click",
    "requests",
    "psutil",

    # Visualization & Monitoring
    "matplotlib",  # Now primary for architecture visualization (ADR-001)
    "seaborn",
    "tqdm",
    "tensorboard",

    # Data Formats
    "h5py",
]

# Development dependencies (not installed by default)
[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.4.0",
    "pytest-cov",
    "pytest-xdist",
    "coverage",

    # Code Quality
    "black",
    "ruff",
    "basedpyright",

    # Type Checking
    "mypy",
    "types-requests",
    "types-pillow",
    "types-pyyaml",
]

gui = [
    "streamlit",
]

# All dependencies including development tools
all = [
    "crackseg[dev,gui]",
]

[project.urls]
Homepage = "https://github.com/crackseg/crackseg"
Documentation = "https://crackseg.readthedocs.io/"
Repository = "https://github.com/crackseg/crackseg.git"
Issues = "https://github.com/crackseg/crackseg/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.black]
# NOTE: In the 'exclude' pattern, a single backslash (\) is correct and multiplatform.
# Black interprets this as a Python regex, and TOML does not require double escaping.
# Do NOT use double backslash (\\) here, even on Windows.
line-length = 79
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | artifacts
  | .taskmaster
  | crackseg.egg-info
  | .pytest_cache
  | .ruff_cache
  | site
)/
'''

[tool.basedpyright]
pythonVersion = "3.12"
include = ["src", "tests"]
exclude = ["**/__pycache__"]

# Main project settings
typeCheckingMode = "strict"

# Global test settings
reportPrivateUsage = "none"  # Allow private usage in tests
reportUnnecessaryTypeIgnoreComment = "error"

# Suppress external library issues
reportMissingTypeStubs = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false

# Global suppressions for ML/Scientific libraries
reportUnknownMemberType = false
reportIncompleteStub = false
reportMissingModuleSource = false

# Test-specific suppression for GUI components
[[tool.basedpyright.overrides]]
include = ["tests/unit/gui/components/**/*.py"]
# Suppress false positives in GUI component tests using mocks
reportCallIssue = false
reportAttributeAccessIssue = false
reportUnknownMemberType = false
reportGeneralTypeIssues = false

# Pytest fixtures and testing framework
[[tool.basedpyright.overrides]]
include = ["tests/**/*.py"]
# Suppress pytest dynamic behavior
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportAttributeAccessIssue = false
reportFunctionMemberAccess = false
reportOptionalCall = false
reportOptionalMemberAccess = false

# PyTorch and ML libraries suppression
[[tool.basedpyright.overrides]]
include = ["tests/**/*.py"]
# Suppress PyTorch internal type issues
reportUnknownParameterType = false
reportUnknownVariableType = false
reportGeneralTypeIssues = false
reportCallIssue = false

# Mock and fixture heavy tests
[[tool.basedpyright.overrides]]
include = ["tests/unit/**/*.py", "tests/integration/**/*.py"]
# Allow dynamic test patterns
reportArgumentType = false
reportIncompatibleMethodOverride = false
reportIncompatibleVariableOverride = false

# E2E and complex testing patterns
[[tool.basedpyright.overrides]]
include = ["tests/e2e/**/*.py"]
# E2E tests use many dynamic patterns
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportAttributeAccessIssue = false
reportCallIssue = false
reportGeneralTypeIssues = false

# Docker and environment tests
[[tool.basedpyright.overrides]]
include = ["tests/docker/**/*.py"]
# Docker tests interact with external systems
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportImportCycles = false
reportMissingImports = false

# ML/PyTorch specific suppressions
[[tool.basedpyright.overrides]]
include = ["tests/**/*.py"]
# Aggressive suppression for external ML libraries
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUnknownParameterType = false
reportAttributeAccessIssue = false
reportOptionalCall = false
reportOptionalMemberAccess = false
reportCallIssue = false
reportArgumentType = false
reportAssignmentType = false
reportReturnType = false

[tool.ruff]
line-length = 79
target-version = "py312"
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
    "B",  # flake8-bugbear
]
lint.ignore = []

# Ruff's isort rules will respect the 'exclude' from Black by default.
# It will also respect .gitignore.
# The 'sections' and 'default_section' from your previous isort config
# align well with Ruff's defaults when 'known-first-party' is set.
[tool.ruff.lint.isort]
known-first-party = ["crackseg", "gui", "scripts", "tests"]
# section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
files = ["src/", "tests/", "scripts/"]
namespace_packages = true
explicit_package_bases = true
plugins = ["numpy.typing.mypy_plugin"]

# If you use NumPy extensively and have its stubs (e.g., via numpy[typing]),
# you might enable its MyPy plugin for better type checking of NumPy code.

[tool.pytest.ini_options]
minversion = "8.4.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--durations=10",
    "-ra",
    # Performance optimizations (enabled when pytest-xdist is available)
    # "-n", "auto",  # Parallel execution
    # "--dist", "worksteal",  # Load balancing
    # Coverage options (commented out for phased testing)
    # "--cov=crackseg",
    # "--cov=gui",
    # "--cov-report=term-missing",
    # "--cov-report=html:artifacts/test-results/coverage",
    # "--cov-fail-under=80"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast",
    "performance_test: marks tests for performance optimization tracking",
    "expensive_fixture: marks fixtures as expensive (should be cached)",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests as GUI tests",
    "cuda: marks tests as requiring CUDA",
    "hydra: marks tests as using hydra configuration"
]
# Performance optimization plugin (temporarily disabled)
# plugins = ["tests.utils.pytest_performance_plugin"]
# Test result caching for faster reruns
cache_dir = ".pytest_cache"
# Filter warnings to reduce noise
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.setuptools.packages.find]
where = ["src"]
include = ["crackseg*"]
exclude = ["tests*"]