[project]
name = "crackseg"
version = "0.1.0"
description = "A project for pavement crack segmentation using PyTorch."
readme = "README.md"
requires-python = ">=3.12"

[tool.black]
# NOTE: In the 'exclude' pattern, a single backslash (\) is correct and multiplatform.
# Black interprets this as a Python regex, and TOML does not require double escaping.
# Do NOT use double backslash (\\) here, even on Windows.
line-length = 79
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | outputs
  | .taskmaster
  | test-artifacts
  | test-results
  | selenium-videos
  | performance-historical-data
  | performance-reports
  | generated_configs
  | crackseg.egg-info
  | .pytest_cache
  | .ruff_cache
  | site
  | htmlcov
)/
'''

[tool.basedpyright]
pythonVersion = "3.12"
include = ["src", "tests"]
exclude = ["**/__pycache__"]

# Main project settings
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnknownParameterType = false

# Test-specific suppression for GUI components
[[tool.basedpyright.overrides]]
include = ["tests/unit/gui/components/**/*.py"]
# Suppress false positives in GUI component tests using mocks
reportCallIssue = false
reportAttributeAccessIssue = false
reportUnknownMemberType = false
reportGeneralTypeIssues = false

reportPrivateUsage = "none"  # Allow private usage in tests
reportUnnecessaryTypeIgnoreComment = "error"

[tool.ruff]
line-length = 79
target-version = "py312"
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
    "B",  # flake8-bugbear
]
lint.ignore = []

# Ruff's isort rules will respect the 'exclude' from Black by default.
# It will also respect .gitignore.
# The 'sections' and 'default_section' from your previous isort config
# align well with Ruff's defaults when 'known-first-party' is set.
[tool.ruff.lint.isort]
known-first-party = ["src", "scripts"]
# section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
files = ["src/", "tests/", "scripts/"]
namespace_packages = true
explicit_package_bases = true
plugins = ["numpy.typing.mypy_plugin"]

# If you use NumPy extensively and have its stubs (e.g., via numpy[typing]),
# you might enable its MyPy plugin for better type checking of NumPy code.

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--durations=10",
    "-ra",
    # Performance optimizations (enabled when pytest-xdist is available)
    # "-n", "auto",  # Parallel execution
    # "--dist", "worksteal",  # Load balancing
    # Quality gates
    "--cov=src",
    "--cov=scripts/gui",
    "--cov-report=term-missing",
    "--cov-report=html:test-results/coverage",
    "--cov-fail-under=80"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast",
    "performance_test: marks tests for performance optimization tracking",
    "expensive_fixture: marks fixtures as expensive (should be cached)",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests as GUI tests",
    "cuda: marks tests as requiring CUDA",
    "hydra: marks tests as using hydra configuration"
]
# Performance optimization plugin (temporarily disabled)
# plugins = ["tests.utils.pytest_performance_plugin"]
# Test result caching for faster reruns
cache_dir = ".pytest_cache"
# Filter warnings to reduce noise
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.setuptools.packages.find]
where = ["."]
include = ["scripts*"]
exclude = ["tests*", "docs*"]