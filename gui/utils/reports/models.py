"""
Pydantic models for report structure validation. This module defines
the data models for the JSON report generated by the results gallery.
Using Pydantic ensures that the report structure is consistent and
that the data types are correct.
"""

from __future__ import annotations

from datetime import datetime
from typing import Any

from pydantic import BaseModel, Field, field_validator


class ReportSummary(BaseModel):
    """Summary of the exported report."""

    total_triplets: int = Field(..., description="Total triplets scanned.")
    valid_triplets: int = Field(..., description="Number of healthy triplets.")
    export_scope: str = Field(..., description="Scope of the export.")
    exported_at: datetime = Field(
        default_factory=datetime.now, description="Timestamp of the export."
    )
    included_images: bool = Field(
        ..., description="Whether image files were included."
    )
    included_metadata: bool = Field(
        ..., description="Whether metadata was included."
    )


class ReportTriplet(BaseModel):
    """Represents a single triplet's data in the report."""

    id: str = Field(..., description="Unique ID of the triplet.")
    dataset_name: str = Field(..., description="Name of the source dataset.")
    health_status: str = Field(
        ..., description="Health status of the triplet."
    )
    is_complete: bool = Field(..., description="If the triplet is complete.")
    paths: dict[str, str] = Field(
        ..., description="Paths to the triplet files."
    )
    metadata: dict[str, Any] = Field(..., description="Associated metadata.")

    @field_validator("paths")
    @classmethod
    def validate_paths(cls, v: dict[str, str]) -> dict[str, str]:
        """Ensure all required paths are present."""
        required_keys = {"image", "mask", "prediction"}
        if not required_keys.issubset(v.keys()):
            raise ValueError(f"Paths must include {required_keys}")
        return v


class ReportData(BaseModel):
    """The root model for the entire report data structure."""

    summary: ReportSummary = Field(..., description="The report summary.")
    triplets: list[ReportTriplet] = Field(
        default_factory=list, description="List of exported triplets."
    )


def create_report_data_model(
    report_dict: dict[str, Any],
) -> tuple[ReportData | None, str | None]:
    """
    Validates a report dictionary and creates a Pydantic model. Args:
    report_dict: The dictionary to validate. Returns: A tuple containing
    the validated ReportData model (or None) and an error message string
    (or None).
    """
    try:
        report_data = ReportData.model_validate(report_dict)
        return report_data, None
    except Exception as e:
        return None, str(e)
