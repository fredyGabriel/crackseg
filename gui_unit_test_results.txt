============================= test session starts =============================
platform win32 -- Python 3.12.9, pytest-8.4.0, pluggy-1.5.0 -- C:\Users\fgrv\miniconda3\envs\crackseg\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\fgrv\OneDrive\Documentos\PythonProjects\doctorado\crackseg
configfile: pyproject.toml
plugins: hydra-core-1.3.2, cov-6.1.1, mock-3.14.0
collecting ... collected 46 items

tests/unit/gui/test_error_console.py::TestErrorCategorizer::test_categorize_syntax_error PASSED [  2%]
tests/unit/gui/test_error_console.py::TestErrorCategorizer::test_categorize_structure_error PASSED [  4%]
tests/unit/gui/test_error_console.py::TestErrorCategorizer::test_categorize_type_error PASSED [  6%]
tests/unit/gui/test_error_console.py::TestErrorCategorizer::test_categorize_value_error PASSED [  8%]
tests/unit/gui/test_error_console.py::TestErrorCategorizer::test_categorize_multiple_errors_sorting PASSED [ 10%]
tests/unit/gui/test_error_console.py::TestErrorCategorizer::test_context_building_with_line_info PASSED [ 13%]
tests/unit/gui/test_error_console.py::TestErrorCategorizer::test_quick_fixes_generation PASSED [ 15%]
tests/unit/gui/test_error_console.py::TestErrorCategorizer::test_humanize_error_message PASSED [ 17%]
tests/unit/gui/test_error_console.py::TestErrorCategorizer::test_line_context_analysis PASSED [ 19%]
tests/unit/gui/test_error_console.py::TestErrorConsole::test_render_no_errors PASSED [ 21%]
tests/unit/gui/test_error_console.py::TestErrorConsole::test_render_critical_errors PASSED [ 23%]
tests/unit/gui/test_error_console.py::TestErrorConsole::test_render_warning_errors PASSED [ 26%]
tests/unit/gui/test_error_console.py::TestErrorConsole::test_group_errors_by_category PASSED [ 28%]
tests/unit/gui/test_error_console.py::TestErrorConsole::test_render_error_details_expandable PASSED [ 30%]
tests/unit/gui/test_error_console.py::TestErrorConsole::test_render_fix_suggestions_interactive PASSED [ 32%]
tests/unit/gui/test_error_console.py::TestErrorConsole::test_categorized_error_properties PASSED [ 34%]
tests/unit/gui/test_error_console.py::TestErrorCategorizerPatterns::test_syntax_patterns_matching PASSED [ 36%]
tests/unit/gui/test_error_console.py::TestErrorCategorizerPatterns::test_field_specific_suggestions PASSED [ 39%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerCore::test_categorize_syntax_error PASSED [ 41%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerCore::test_categorize_structure_error PASSED [ 43%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerCore::test_categorize_type_error PASSED [ 45%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerCore::test_categorize_value_error PASSED [ 47%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerCore::test_multiple_errors_sorting PASSED [ 50%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerCore::test_context_building_with_line_info PASSED [ 52%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerCore::test_quick_fixes_generation PASSED [ 54%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerCore::test_humanize_error_message PASSED [ 56%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerCore::test_line_context_analysis PASSED [ 58%]
tests/unit/gui/test_error_console_simple.py::TestCategorizedError::test_categorized_error_properties PASSED [ 60%]
tests/unit/gui/test_error_console_simple.py::TestCategorizedError::test_severity_emoji_mapping PASSED [ 63%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerPatterns::test_field_specific_suggestions PASSED [ 65%]
tests/unit/gui/test_error_console_simple.py::TestErrorCategorizerPatterns::test_syntax_pattern_detection PASSED [ 67%]
tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_get_upload_file_info_valid_yaml PASSED [ 69%]
tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_get_upload_file_info_invalid_extension PASSED [ 71%]
tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_get_upload_file_info_oversized_file PASSED [ 73%]
tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_validate_uploaded_content_valid_yaml PASSED [ 76%]
tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_validate_uploaded_content_invalid_yaml FAILED [ 78%]
tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_upload_config_file_success FAILED [ 80%]
tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_upload_config_file_invalid_extension PASSED [ 82%]
tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_upload_config_file_oversized PASSED [ 84%]
tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_upload_config_file_invalid_yaml_syntax FAILED [ 86%]
tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_upload_config_file_encoding_error PASSED [ 89%]
tests/unit/gui/test_file_upload.py::TestFileUploadValidationEdgeCases::test_empty_yaml_file FAILED [ 91%]
tests/unit/gui/test_file_upload.py::TestFileUploadValidationEdgeCases::test_yaml_with_only_comments FAILED [ 93%]

================================== FAILURES ===================================
_____ TestFileUploadFunctions.test_validate_uploaded_content_invalid_yaml _____

self = <test_file_upload.TestFileUploadFunctions object at 0x000002D8272CD700>

    def test_validate_uploaded_content_invalid_yaml(self):
        """Test validation of invalid YAML content."""
        invalid_yaml = """
        model:
          name: test_model
          parameters:
            learning_rate: 0.001
            batch_size: 32
          - invalid_structure  # This is invalid YAML
        """
    
        is_valid, errors = validate_uploaded_content(invalid_yaml)
    
        assert is_valid is False
        assert len(errors) > 0
>       assert any(error.severity == "error" for error in errors)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests\unit\gui\test_file_upload.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <list_iterator object at 0x000002D827527E20>

>   assert any(error.severity == "error" for error in errors)
               ^^^^^^^^^^^^^^
E   AttributeError: 'ValidationError' object has no attribute 'severity'

tests\unit\gui\test_file_upload.py:102: AttributeError
___________ TestFileUploadFunctions.test_upload_config_file_success ___________

self = <test_file_upload.TestFileUploadFunctions object at 0x000002D8272CD3A0>
mock_open = <MagicMock name='open' id='3127395909360'>
mock_path_class = <MagicMock name='Path' id='3127390993728'>

        @patch("scripts.gui.utils.config.io.Path")
        @patch("builtins.open")
        def test_upload_config_file_success(self, mock_open, mock_path_class):
            """Test successful file upload."""
            # Setup mocks
            mock_file = Mock()
            mock_file.name = "test_config.yaml"
            mock_file.size = 1024
            mock_file.read.return_value = b"""
    model:
      name: test_model
      learning_rate: 0.001
    """
    
            # Mock path operations
            mock_path = Mock()
            mock_path.suffix.lower.return_value = ".yaml"
            mock_path.stem = "test_config"
            mock_path_class.return_value = mock_path
    
            # Mock target directory
            mock_target_dir = Mock()
            mock_target_dir.mkdir = Mock()
            mock_path_class.side_effect = [mock_path, mock_target_dir, Mock()]
    
            # Mock file writing
            mock_file_handle = Mock()
            mock_open.return_value.__enter__.return_value = mock_file_handle
    
            with patch("scripts.gui.utils.config.io.datetime") as mock_datetime:
                mock_datetime.now.return_value.strftime.return_value = (
                    "20231201_120000"
                )
    
                with tempfile.TemporaryDirectory() as temp_dir:
>                   result = upload_config_file(
                        mock_file,
                        target_directory=temp_dir,
                        validate_on_upload=False,  # Skip validation for this test
                    )

tests\unit\gui\test_file_upload.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

uploaded_file = <Mock id='3127395904560'>
target_directory = 'C:\\Users\\fgrv\\AppData\\Local\\Temp\\tmpeuz4blea'
validate_on_upload = False

    def upload_config_file(
        uploaded_file: Any,
        target_directory: str | Path = "generated_configs",
        validate_on_upload: bool = True,
    ) -> tuple[str, dict[str, Any], list[ValidationError]]:
        """Upload and process a YAML configuration file from user's local system.
    
        Args:
            uploaded_file: Streamlit uploaded file object.
            target_directory: Directory where the file should be saved.
            validate_on_upload: Whether to validate the file during upload.
    
        Returns:
            Tuple of (saved_file_path, config_dict, validation_errors).
    
        Raises:
            ConfigError: If the file cannot be processed or saved.
        """
        # Validate file size
        if uploaded_file.size > MAX_UPLOAD_SIZE_BYTES:
            size_mb = uploaded_file.size / (1024 * 1024)
            raise ConfigError(
                f"File size ({size_mb:.1f} MB) exceeds maximum allowed "
                f"size of {MAX_UPLOAD_SIZE_MB} MB"
            )
    
        # Validate file extension
        file_path = Path(uploaded_file.name)
        if file_path.suffix.lower() not in ALLOWED_EXTENSIONS:
            raise ConfigError(
                f"Invalid file extension '{file_path.suffix}'. "
                f"Allowed extensions: {', '.join(ALLOWED_EXTENSIONS)}"
            )
    
        # Create target directory if it doesn't exist
        target_dir = Path(target_directory)
        target_dir.mkdir(parents=True, exist_ok=True)
    
        # Generate unique filename with timestamp to avoid conflicts
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        base_name = file_path.stem
        extension = file_path.suffix
        unique_filename = f"{timestamp}_{base_name}{extension}"
>       target_path = target_dir / unique_filename
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: unsupported operand type(s) for /: 'Mock' and 'str'

scripts\gui\utils\config\io.py:257: TypeError
_____ TestFileUploadFunctions.test_upload_config_file_invalid_yaml_syntax _____

self = <test_file_upload.TestFileUploadFunctions object at 0x000002D8272CF3B0>

    def test_upload_config_file_invalid_yaml_syntax(self):
        """Test upload with invalid YAML syntax."""
        mock_file = Mock()
        mock_file.name = "invalid_config.yaml"
        mock_file.size = 1024
        mock_file.read.return_value = b"""
        model:
          name: test_model
        - invalid: structure
        """
    
>       with pytest.raises(ConfigError) as exc_info:
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
E       Failed: DID NOT RAISE <class 'scripts.gui.utils.config.exceptions.ConfigError'>

tests\unit\gui\test_file_upload.py:186: Failed
___________ TestFileUploadValidationEdgeCases.test_empty_yaml_file ____________

self = <test_file_upload.TestFileUploadValidationEdgeCases object at 0x000002D8272CF710>

    def test_empty_yaml_file(self):
        """Test validation of empty YAML file."""
        empty_yaml = ""
        is_valid, errors = validate_uploaded_content(empty_yaml)
    
        # Empty YAML should be valid (becomes empty dict)
>       assert is_valid is True
E       assert False is True

tests\unit\gui\test_file_upload.py:214: AssertionError
_______ TestFileUploadValidationEdgeCases.test_yaml_with_only_comments ________

self = <test_file_upload.TestFileUploadValidationEdgeCases object at 0x000002D8272CF890>

    def test_yaml_with_only_comments(self):
        """Test validation of YAML with only comments."""
        comment_only_yaml = """
        # This is a comment
        # Another comment
        """
    
        is_valid, errors = validate_uploaded_content(comment_only_yaml)
    
        # Comments-only YAML should be valid
>       assert is_valid is True
E       assert False is True

tests\unit\gui\test_file_upload.py:226: AssertionError
=========================== short test summary info ===========================
FAILED tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_validate_uploaded_content_invalid_yaml
FAILED tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_upload_config_file_success
FAILED tests/unit/gui/test_file_upload.py::TestFileUploadFunctions::test_upload_config_file_invalid_yaml_syntax
FAILED tests/unit/gui/test_file_upload.py::TestFileUploadValidationEdgeCases::test_empty_yaml_file
FAILED tests/unit/gui/test_file_upload.py::TestFileUploadValidationEdgeCases::test_yaml_with_only_comments
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 5 failures !!!!!!!!!!!!!!!!!!!!!!!!!!
======================== 5 failed, 38 passed in 0.98s =========================
